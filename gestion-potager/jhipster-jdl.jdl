
application {
	config {
	  	baseName microservice,
		applicationType microservice,
		packageName fr.syncrase.perma,
		serverPort 8081,
		authenticationType oauth2,
		cacheProvider hazelcast,
		enableHibernateCache true,
		websocket false,
		databaseType sql,
		devDatabaseType postgresql,
		prodDatabaseType postgresql,
		searchEngine false,
		messageBroker false,
		serviceDiscoveryType eureka,
		buildTool maven,
		enableSwaggerCodegen true,
		testFrameworks [gatling, cucumber],
		jhiPrefix gp,
		dtoSuffix DTO,
		enableTranslation true,
		nativeLanguage fr,
		languages [fr, zh-tw, en, de, el, hi, it, ja, ru],
		skipClient true,
		skipUserManagement true,
		clientPackageManager npm,
		embeddableLaunchScript false,
		useSass true
	}
	
	entities *
}

application {
	config {
	  	baseName gateway,
		applicationType gateway,
		packageName fr.syncrase.perma,
		serverPort 8080,
		authenticationType oauth2,
		cacheProvider hazelcast,
		enableHibernateCache true,
		websocket false,
		databaseType sql,
		devDatabaseType postgresql,
		prodDatabaseType postgresql,
		searchEngine false,
		messageBroker false,
		serviceDiscoveryType eureka,
		buildTool maven,
		enableSwaggerCodegen false,
		embeddableLaunchScript false,
		useSass true,
		clientPackageManager npm,
		clientFramework angularX,
		clientTheme sketchy,
    		clientThemeVariant dark,
		testFrameworks [gatling, cucumber, protractor],
		jhiPrefix gp,
		dtoSuffix DTO,
		enableTranslation true,
		nativeLanguage fr,
		languages [fr, zh-tw, en, de, el, hi, it, ja, ru],
		skipClient false,
		skipUserManagement false
	}
	
	entities *
	
	// Toutes les entités viennent du microservice 'microservice'
	microservice * with microservice
}

deployment {
	deploymentType docker-compose
	appsFolders [gateway, microservice]
	dockerRepositoryName "dockerRepo"
	monitoring elk,
	serviceDiscoveryType eureka,
	gatewayType zuul,
	consoleOptions [zipkin]
}

entity Mois {
	numero Double required,
	nom String required
}

entity PeriodeAnnee {
}

entity Plante {
	nomLatin String required,
	entretien String,
	histoire String,
	rusticite String // ENUM
}

entity Sol {
	acidite Double // ENUM,
	type String // argileux calcaire etc ENUM
}

entity NomVernaculaire {
	nom String required,
	description String
}

entity Classification {
}

entity Cronquist {
	regne String required,
	sousRegne String required,
	division String required,
	classe String required,
	sousClasse String required,
	ordre String required,
	famille String required,
	genre String required
}

entity Raunkier {
	type String required
}

entity APGI {
	ordre String required,
	famille String required
}

entity APGII {
	ordre String required,
	famille String required
}

entity APGIII {
	ordre String required,
	famille String required
}

entity APGIV {
	ordre String required // ENUM
	famille String required // ENUM
}

entity Semis {

}

// à la volée, en ligne
entity TypeSemis {
	description String // ENUM
}

entity CycleDeVie {
	vitesseDeCroissance String // ENUM
}

entity Germination {
	tempsDeGermination String,
	conditionDeGermination String // ENUM
}

entity Allelopathie {
	type String required // symbiose ou parasitisme ou autre ENUM,
	description String
}

entity Ressemblance {
	description String
}

entity Exposition {
	valeur String
}

relationship OneToOne {
	PeriodeAnnee{debut(nom) required} to Mois,
	PeriodeAnnee{fin(nom) required} to Mois
	
	Semis{semisPleineTerre} to PeriodeAnnee,
	Semis{semisSousAbris} to PeriodeAnnee,
	Semis{typeSemis} to TypeSemis,
	Semis{germination} to Germination,
	
	Plante{cycleDeVie} to CycleDeVie,
	CycleDeVie{semis} to Semis,
	CycleDeVie{apparitionFeuilles} to PeriodeAnnee,
	CycleDeVie{floraison} to PeriodeAnnee,
	CycleDeVie{recolte} to PeriodeAnnee,
	CycleDeVie{croissance} to PeriodeAnnee,
	CycleDeVie{maturite} to PeriodeAnnee,
	CycleDeVie{plantation} to PeriodeAnnee,
	CycleDeVie{rempotage} to PeriodeAnnee,
	
	Plante{classification} to Classification,
	Classification{raunkier} to Raunkier,
	Classification{cronquist} to Cronquist,
	Classification{apg1} to APGI,
	Classification{apg2} to APGII,
	Classification{apg3} to APGIII,
	Classification{apg4} to APGIV,
	
	Allelopathie{cible} to Plante{allelopathieRecue},
	Allelopathie{origine} to Plante{allelopathieProduite}
}

relationship OneToMany {
	Plante{confusions} to Ressemblance{confusion},
	Plante{interactions} to Allelopathie{plante},
	Plante{expositions} to Exposition,
	Plante{sols} to Sol
}

relationship ManyToMany {
	Plante{nomsVernaculaires} to NomVernaculaire{plantes}
}

paginate * with pagination
dto * with mapstruct
filter *
service * with serviceImpl
// use mapstruct, serviceImpl, pagination for all
//use mapstruct, serviceImpl, pagination for all


