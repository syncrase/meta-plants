
entity Mois {
	numero Double required,
	nom String required
}

entity PeriodeAnnee {
}

entity Plante {
	entretien String,
	histoire String,
    vitesseCroissance String,
    exposition String //ombre, mi-ombre, etc
}

entity Reproduction {
	vitesse String,
    type String
}

entity Sol {
	phMin Double, // ENUM,
	phMax Double, // ENUM,
	type String, // argileux calcaire etc ENUM
    richesse String
}

entity NomVernaculaire {
	nom String required,
	description String
}

entity Classification {
	nomLatin String,
}

entity Cronquist {
	regne String,
	sousRegne String,
	division String,
	classe String,
	sousClasse String,
	ordre String,
	famille String,
	genre String,
	espece String,
}

entity Raunkier {
	type String required
}

entity APGI {
	ordre String required,
	famille String required
}

entity APGII {
	ordre String required,
	famille String required
}

entity APGIII {
	ordre String required,
	famille String required
}

entity APGIV {
	ordre String required // ENUM
	famille String required // ENUM
}

entity Semis {

}

// à la volée, en ligne
entity TypeSemis {
	type String required,
	description String // ENUM
}

entity CycleDeVie {

}

entity Germination {
	tempsDeGermination String,
	conditionDeGermination String // ENUM
}

entity Allelopathie {
	type String required ,// symbiose ou parasitisme ou autre ENUM
	description String,
	impact Integer min(-10) max(10)
}

/**
* Pour que la ressemblance soit réflexive il faut l'enregistrer 2 fois. Car si la ressemblance A ressemble à B est enregistrée, alors B ne ressemble pas à A
*/
entity Ressemblance {
	description String
}

entity Ensoleillement {
	orientation String, // nord sud etc
    ensoleilement Double, // heures par jour
}

entity Temperature {
	min Double,
    max Double,
    description String, // Gel pour fructifiction, durée de gel minimum pour fructification, ...,
	rusticite String // ENUM
}

entity Racine {
	type String
}

entity Strate {
	type String
}

entity Feuillage {
	type String
}

relationship OneToOne {
	PeriodeAnnee{debut(nom) required} to Mois,
	PeriodeAnnee{fin(nom) required} to Mois
	
	Semis{semisPleineTerre} to PeriodeAnnee,
	Semis{semisSousAbris} to PeriodeAnnee,
	Semis{typeSemis} to TypeSemis,
	Semis{germination} to Germination,
	
	Plante{cycleDeVie} to CycleDeVie,
	CycleDeVie{semis} to Semis,
	CycleDeVie{apparitionFeuilles} to PeriodeAnnee,
	CycleDeVie{floraison} to PeriodeAnnee,
	CycleDeVie{recolte} to PeriodeAnnee,
	CycleDeVie{croissance} to PeriodeAnnee,
	CycleDeVie{maturite} to PeriodeAnnee,
	CycleDeVie{plantation} to PeriodeAnnee,
	CycleDeVie{rempotage} to PeriodeAnnee,
	
    
}

relationship OneToMany {
	Plante{confusions} to Ressemblance{planteRessemblant},
	Plante{ensoleillements} to Ensoleillement,
	Plante{sols} to Sol,
	Temperature{plantes} to Plante,// avec ou sans {plantes} ?
    Racine to Plante,
    Strate to Plante,
    Feuillage to Plante,
    Reproduction to CycleDeVie
    
}

relationship ManyToMany {
	Plante{nomsVernaculaires} to NomVernaculaire{plantes}
}

relationship ManyToOne {
	// Plusieurs allelopathie peuvent être liées à une plante
	Allelopathie{cible} to Plante,
	Allelopathie{origine} to Plante

	// Deux plantes peuvent partager la même classification
	Plante{classification} to Classification,
	Classification{raunkier} to Raunkier,
	Classification{cronquist} to Cronquist,
	Classification{apg1} to APGI,
	Classification{apg2} to APGII,
	Classification{apg3} to APGIII,
	Classification{apg4} to APGIV,
}

paginate * with pagination
// dto * with mapstruct
filter *
// service * with serviceImpl
// use mapstruct, serviceImpl, pagination for all
// use mapstruct, serviceImpl, pagination for all

