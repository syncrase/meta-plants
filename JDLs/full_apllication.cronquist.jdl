


application {
	config {
	  	baseName classificationMS,
		applicationType microservice,
		packageName fr.syncrase.ecosyst,
		serverPort 8082,
    	authenticationType jwt,
		cacheProvider hazelcast,
		enableHibernateCache true,
		websocket false,
		databaseType sql,
		devDatabaseType postgresql,
		prodDatabaseType postgresql,
		searchEngine false,
		messageBroker false,
		serviceDiscoveryType eureka,
		buildTool maven,
		enableSwaggerCodegen true,
		testFrameworks [gatling, cucumber],
		jhiPrefix perma,
		dtoSuffix DTO,
		enableTranslation false,
		nativeLanguage fr,
		skipClient true,
		skipUserManagement true,
		clientPackageManager npm,
		embeddableLaunchScript false,
	}
    
    entities Url, CronquistRank, CronquistPlante
}

// https://www.jhipster.tech/jdl/deployments
//deployment {
//	deploymentType docker-compose
//	dockerRepositoryName "dockerRepo"
//	appsFolders [plantsFront, plantsMS, classificationMS]
//}


//***********************************************************
//***********************************************************
// CRONQUIST, PlantsMS : Shared entities
//***********************************************************
//***********************************************************

/**
* Entité partagé pour communiquer sur l'arborescence
*/
entity CronquistPlante {
	superRegne String,
	regne String,
	sousRegne String,
	rameau String,
	infraRegne String,
	superEmbranchement String,
	division String,
	sousEmbranchement String,
	infraEmbranchement String,
	microEmbranchement String,
	superClasse String,
	classe String,
	sousClasse String,
	infraClasse String,
	superOrdre String,
	ordre String,
	sousOrdre String,
	infraOrdre String,
	microOrdre String,
	superFamille String,
	famille String,
	sousFamille String,
	tribu String,
	sousTribu String,
	genre String,
	sousGenre String,
	section String,
	sousSection String,
	espece String,
	sousEspece String,
	variete String,
	sousVariete String,
	forme String,
}

entity Classification {
}


//***********************************************************
//***********************************************************
// CRONQUIST entities
//***********************************************************
//***********************************************************

entity CronquistRank {
    rank CronquistTaxonomikRanks required
    nomFr String unique,
    nomLantin String unique
}

enum CronquistTaxonomikRanks {
    SUPERREGNE (SuperRegne),
    REGNE (Regne),
    SOUSREGNE (SousRegne),
    RAMEAU (Rameau),
    INFRAREGNE (InfraRegne),
    SUPEREMBRANCHEMENT (SuperEmbranchement),
    EMBRANCHEMENT (Embranchement),
    SOUSEMBRANCHEMENT (SousEmbranchement),
    INFRAEMBRANCHEMENT (InfraEmbranchement),
    MICROEMBRANCHEMENT (MicroEmbranchement),
    SUPERCLASSE (SuperClasse),
    CLASSE (Classe),
    SOUSCLASSE (SousClasse),
    INFRACLASSE (InfraClasse),
    SUPERORDRE (SuperOrdre),
    ORDRE (Ordre),
    SOUSORDRE (SousOrdre),
    INFRAORDRE (InfraOrdre),
    MICROORDRE (MicroOrdre),
    SUPERFAMILLE (SuperFamille),
    FAMILLE (Famille),
    SOUSFAMILLE (SousFamille),
    TRIBU (Tribu),
    SOUSTRIBU (SousTribu),
    GENRE (Genre),
    SOUSGENRE (SousGenre),
    SECTION (Section),
    SOUSSECTION (SousSection),
    ESPECE (Espece),
    SOUSESPECE (SousEspece),
    VARIETE (Variete),
    SOUSVARIETE (SousVariete),
    FORME (Forme),
    SOUSFORME (SousForme)
}

entity Url {
    url String required
}


//***********************************************************
//***********************************************************
// CRONQUIST associations
//***********************************************************
//***********************************************************


relationship OneToMany {
    CronquistRank{children(nomFr)} to CronquistRank{parent(nomFr)},
    CronquistRank{urls} to Url,
    CronquistRank{synonymes(nomFr)} to CronquistRank,

}

paginate * with pagination
// dto * with mapstruct
filter *
service * with serviceImpl
// use mapstruct, serviceImpl, pagination for all



