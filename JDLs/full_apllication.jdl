

application {
	config {
	  	baseName plantsFront,
		applicationType gateway,
		packageName fr.syncrase.ecosyst,
		serverPort 8080,
    	authenticationType jwt,
		cacheProvider hazelcast,
		enableHibernateCache true,
		websocket false,
		databaseType sql,
		devDatabaseType postgresql,
		prodDatabaseType postgresql,
		searchEngine false,
		messageBroker false,
		serviceDiscoveryType eureka,
		buildTool maven,
		enableSwaggerCodegen false,
		embeddableLaunchScript false
		clientPackageManager npm,
    	enableGradleEnterprise false,
		clientFramework angularX,
    	withAdminUi true,
		clientTheme sketchy,
    	clientThemeVariant dark,
		testFrameworks [gatling, cucumber, protractor],
		jhiPrefix perma,
		dtoSuffix DTO,
		enableTranslation false,
		nativeLanguage fr,
    	languages [en, fr],
		skipClient false,
		skipUserManagement false
	}
	
	entities *
	
	// Toutes les entités viennent du microservice 'microservice'
	microservice * with plantsms
}

application {
	config {
	  	baseName plantsMS,
		applicationType microservice,
		packageName fr.syncrase.ecosyst,
		serverPort 8081,
    	authenticationType jwt,
		cacheProvider hazelcast,
		enableHibernateCache true,
		websocket false,
		databaseType sql,
		devDatabaseType postgresql,
		prodDatabaseType postgresql,
		searchEngine false,
		messageBroker false,
		serviceDiscoveryType eureka,
		buildTool maven,
		enableSwaggerCodegen true,
		testFrameworks [gatling, cucumber],
		jhiPrefix perma,
		dtoSuffix DTO,
		enableTranslation false,
		nativeLanguage fr,
		skipClient true,
		skipUserManagement true,
		clientPackageManager npm,
		embeddableLaunchScript false
	}
	
	entities *
}

// https://www.jhipster.tech/jdl/deployments
deployment {
	deploymentType docker-compose
	dockerRepositoryName "dockerRepo"
	appsFolders [plantsFront, plantsMS]
}


entity Mois {
	numero Double required,
	nom String required
}

entity PeriodeAnnee {
}

/**
* Une plante est soit une plante botanique qui correspond à une unique classification (et n'est associée à aucune autre plante, elle est unique) soit une plante potagère qui correspond à une unique plante botanique
*/
entity Plante {
	entretien String,
	histoire String,
    vitesseCroissance String,
    exposition String //ombre, mi-ombre, etc
}

entity Reproduction {
	vitesse String,
    type String
}

entity Sol {
	phMin Double, // ENUM,
	phMax Double, // ENUM,
	type String, // argileux calcaire etc ENUM
    richesse String
}

entity NomVernaculaire {
	nom String required,
	description String
}

entity Classification {
}

entity Cronquist {
	regne String,
	sousRegne String,
	division String,
	classe String,
	sousClasse String,
	ordre String,
	famille String,
	genre String,
	// TODO add unique constraint
	espece String,
}

entity Raunkier {
	type String required
}

entity APGI {
	ordre String required,
	famille String required
}

entity APGII {
	ordre String required,
	famille String required
}

entity APGIII {
	ordre String required,
	famille String required
}

entity APGIV {
	ordre String required // ENUM
	famille String required // ENUM
}

entity Semis {

}

// à la volée, en ligne
entity TypeSemis {
	type String required,
	description String // ENUM
}

entity CycleDeVie {

}

entity Germination {
	tempsDeGermination String,
	conditionDeGermination String // ENUM
}

entity Allelopathie {
	type String required ,// symbiose ou parasitisme ou autre ENUM
	description String,
	impact Integer min(-10) max(10)
}

/**
* Pour que la ressemblance soit réflexive il faut l'enregistrer 2 fois. Car si la ressemblance A ressemble à B est enregistrée, alors B ne ressemble pas à A
*/
entity Ressemblance {
	description String
}

entity Ensoleillement {
	orientation String, // nord sud etc
    ensoleilement Double, // heures par jour
}

entity Temperature {
	min Double,
    max Double,
    description String, // Gel pour fructifiction, durée de gel minimum pour fructification, ...,
	rusticite String // ENUM
}

entity Racine {
	type String
}

entity Strate {
	type String
}

entity Feuillage {
	type String
}

relationship OneToOne {
	Classification{raunkier} to Raunkier,
	Classification{cronquist} to Cronquist,
	Classification{apg1} to APGI,
	Classification{apg2} to APGII,
	Classification{apg3} to APGIII,
	Classification{apg4} to APGIV,
	/** 
	* Une plante ne correspond qu'à une seule classification
	* Mais, étant donnée les plantes potagère, une classification pourrait correspondre à plusieurs plantes
	* Mais je décide qu'une plante potagère n'est pas liée à la classification, c'est le rôle de la plante botanique
	*/
	Plante{classification} to Classification{plante},
    
}

relationship OneToMany {
	Plante{confusions} to Ressemblance{planteRessemblant},
	Plante{ensoleillements} to Ensoleillement,

	/** 
	* Une plante peut avoir beaucoup de variantes potagère
	* Une plante potagère ne correspond qu'à une seule plante botanique et n'est associé à aucune classification (contenu dans le plante botanique)
	*/
	Plante{plantesPotageres} to Plante,

    Reproduction to CycleDeVie,
    
}

relationship ManyToMany {
	Plante{nomsVernaculaires(nom)} to NomVernaculaire{plantes},
}

relationship ManyToOne {
	Plante{cycleDeVie} to CycleDeVie,

	Plante{sol} to Sol,
	Plante{temperature} to Temperature,
    Plante{racine} to Racine,
    Plante{strate} to Strate,
    Plante{feuillage} to Feuillage,


	// Plusieurs allelopathie peuvent être liées à une plante
	// L'allélopathie n'est pas enregistré dans Plante
	Allelopathie{cible required} to Plante,
	Allelopathie{origine required} to Plante,

	
	Semis{semisPleineTerre} to PeriodeAnnee,
	Semis{semisSousAbris} to PeriodeAnnee,
	Semis{typeSemis(type)} to TypeSemis,
	Semis{germination} to Germination,
	
	CycleDeVie{semis} to Semis,
	CycleDeVie{apparitionFeuilles} to PeriodeAnnee,
	CycleDeVie{floraison} to PeriodeAnnee,
	CycleDeVie{recolte} to PeriodeAnnee,
	CycleDeVie{croissance} to PeriodeAnnee,
	CycleDeVie{maturite} to PeriodeAnnee,
	CycleDeVie{plantation} to PeriodeAnnee,
	CycleDeVie{rempotage} to PeriodeAnnee,

	// Il peut y avoir plusieurs mois identique pour le début et pour la fin
	PeriodeAnnee{debut(nom) required} to Mois,
	PeriodeAnnee{fin(nom) required} to Mois,
}

paginate * with pagination
// dto * with mapstruct
filter *
// service * with serviceImpl
// use mapstruct, serviceImpl, pagination for all
// use mapstruct, serviceImpl, pagination for all



